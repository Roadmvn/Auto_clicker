import pyautogui
import keyboard
import threading
import time
import json
from concurrent.futures import ThreadPoolExecutor

class AutoClicker:
    def __init__(self):
        self.coordinates = []  # Format: [(x, y, nb_clics), ...]
        self.delay = 0
        self.is_capturing = False
        self.last_params = {
            'coordinates': [],
            'delay': 0
        }
        self.has_executed = False
        pyautogui.FAILSAFE = True
        
    def get_coordinates_interactive(self):
        """Lance le mode de capture interactive des coordonn√©es"""
        capture_thread = threading.Thread(target=self.start_coordinate_listener)
        capture_thread.start()
        capture_thread.join()

    def start_coordinate_listener(self):
        self.is_capturing = True
        print("\nüìç Mode Capture des Positions")
        print("---------------------------")
        print("‚Üí F2: Capturer la position actuelle du curseur")
        print("‚Üí F3: Terminer la capture")
        print("‚Üí √âchap: Quitter le programme\n")
        
        while self.is_capturing:
            if keyboard.is_pressed('F2'):
                x, y = pyautogui.position()
                nb_clics = self.get_click_count()
                self.coordinates.append((x, y, nb_clics))
                print(f"‚úÖ Position captur√©e: ({x}, {y}) - {nb_clics} clics")
                time.sleep(0.3)
            elif keyboard.is_pressed('F3'):
                self.is_capturing = False
                print("\n‚úÖ Capture termin√©e avec succ√®s!")
                break
            elif keyboard.is_pressed('esc'):
                self.is_capturing = False
                print("\n‚ùå Programme termin√© par l'utilisateur")
                exit()

    def get_click_count(self):
        while True:
            try:
                clicks = int(input("\nEntrez le nombre de fois que le clic doit √™tre effectu√© √† cette position : "))
                if clicks > 0:
                    return clicks
                print("‚ùå Le nombre de clics doit √™tre sup√©rieur √† 0.")
            except ValueError:
                print("‚ùå Veuillez entrer un nombre entier valide.")

    def show_coordinates(self):
        if not self.coordinates:
            print("\n‚ö†Ô∏è Aucune position enregistr√©e.")
            print("‚Üí Utilisez l'option 1 pour capturer des positions.")
            return False
        
        print("\nüìã Liste des positions enregistr√©es:")
        print("--------------------------------")
        for i, (x, y, clicks) in enumerate(self.coordinates, 1):
            print(f"{i}. Position ({x}, {y}) - {clicks} clics")
        return True

    def modify_coordinates(self):
        if not self.show_coordinates():
            return

        while True:
            try:
                print("\n‚úèÔ∏è Menu de Modification")
                print("-------------------")
                print("1. Modifier une position")
                print("2. Supprimer une position")
                print("3. Retour au menu principal")
                choice = input("\nVotre choix : ")
                
                if choice == '1':
                    idx = int(input(f"\nNum√©ro de la position √† modifier (1-{len(self.coordinates)}) : ")) - 1
                    if 0 <= idx < len(self.coordinates):
                        print("\n1. Modifier les coordonn√©es")
                        print("2. Modifier le nombre de clics")
                        mod_choice = input("\nVotre choix : ")
                        
                        if mod_choice == '1':
                            print("\n‚Üí Placez votre curseur √† la nouvelle position et appuyez sur F2...")
                            while True:
                                if keyboard.is_pressed('F2'):
                                    x, y = pyautogui.position()
                                    self.coordinates[idx] = (x, y, self.coordinates[idx][2])
                                    print(f"‚úÖ Nouvelle position enregistr√©e : ({x}, {y})")
                                    time.sleep(0.3)
                                    break
                        elif mod_choice == '2':
                            new_clicks = self.get_click_count()
                            self.coordinates[idx] = (self.coordinates[idx][0], 
                                                   self.coordinates[idx][1], 
                                                   new_clicks)
                            print(f"‚úÖ Nombre de clics modifi√© : {new_clicks}")
                
                elif choice == '2':
                    idx = int(input(f"\nNum√©ro de la position √† supprimer (1-{len(self.coordinates)}) : ")) - 1
                    if 0 <= idx < len(self.coordinates):
                        del self.coordinates[idx]
                        print("‚úÖ Position supprim√©e avec succ√®s.")
                
                elif choice == '3':
                    break
                
                self.show_coordinates()
            
            except (ValueError, IndexError):
                print("‚ùå Entr√©e invalide. Veuillez r√©essayer.")

    def get_delay(self):
        while True:
            try:
                print("\nüí° Note: 1000 ms = 1 seconde")
                print("Exemple: 100 ms = 0.1 seconde")
                delay_str = input("\nEntrez le d√©lai entre les clics (en millisecondes) : ")
                self.delay = float(delay_str) / 1000  # Conversion en secondes
                if self.delay >= 0:
                    break
                print("‚ùå Le d√©lai doit √™tre positif ou nul.")
            except ValueError:
                print("‚ùå Veuillez entrer un nombre valide.")

    def perform_click(self, coord):
        x, y, nb_clics = coord
        try:
            for i in range(nb_clics):
                pyautogui.click(x, y)
                print(f"‚úÖ Clic {i+1}/{nb_clics} effectu√© √† ({x}, {y})")
                time.sleep(self.delay)
        except Exception as e:
            print(f"‚ùå Erreur lors du clic √† ({x}, {y}): {str(e)}")

    def execute_clicks(self):
        if not self.coordinates:
            print("\n‚ö†Ô∏è Impossible d'ex√©cuter les clics!")
            print("‚Üí Aucune position n'a √©t√© captur√©e")
            print("‚Üí Utilisez d'abord l'option 1 pour capturer des positions")
            return False

        print("\nüöÄ Ex√©cution des clics automatiques")
        print("--------------------------------")
        print(f"Nombre de positions : {len(self.coordinates)}")
        print(f"D√©lai entre les clics : {self.delay * 1000} millisecondes")
        
        self.last_params['coordinates'] = self.coordinates.copy()
        self.last_params['delay'] = self.delay
        self.has_executed = True
        
        with ThreadPoolExecutor(max_workers=len(self.coordinates)) as executor:
            executor.map(self.perform_click, self.coordinates)
        return True

    def execute_last_params(self):
        if not self.has_executed:
            print("\n‚ö†Ô∏è Aucune ex√©cution pr√©c√©dente!")
            print("‚Üí Vous devez d'abord ex√©cuter les clics au moins une fois (option 3)")
            return

        if not self.last_params['coordinates']:
            print("\n‚ö†Ô∏è Aucun param√®tre pr√©c√©dent disponible!")
            print("‚Üí Capturez d'abord des positions (option 1)")
            print("‚Üí Puis ex√©cutez les clics (option 3)")
            return
            
        self.coordinates = self.last_params['coordinates'].copy()
        self.delay = self.last_params['delay']
        print("\nüîÑ Utilisation des derniers param√®tres :")
        print(f"D√©lai : {self.delay * 1000} millisecondes")
        self.show_coordinates()
        self.execute_clicks()

def main():
    print("üéØ Auto-Clicker")
    print("Un outil pour automatiser vos clics")
    print("--------------------------------")
    
    clicker = AutoClicker()
    
    while True:
        print("\nüìã Menu Principal")
        print("-------------")
        print("1. Capturer de nouvelles positions")
        print("2. Afficher/Modifier les positions")
        print("3. Ex√©cuter les clics")
        print("4. R√©ex√©cuter avec les derniers param√®tres")
        print("5. Quitter")
        
        choix = input("\nVotre choix : ")
        
        if choix == '1':
            clicker.coordinates = []
            print("\nüìå Mode Capture")
            print("‚Üí Placez votre curseur aux positions souhait√©es")
            print("‚Üí Appuyez sur F2 pour capturer chaque position")
            print("‚Üí Appuyez sur F3 quand vous avez termin√©")
            clicker.get_coordinates_interactive()
        
        elif choix == '2':
            if not clicker.coordinates:
                print("\n‚ö†Ô∏è Aucune position n'est enregistr√©e!")
                print("‚Üí Utilisez d'abord l'option 1 pour capturer des positions")
                continue
            clicker.modify_coordinates()
            
        elif choix == '3':
            if not clicker.coordinates:
                print("\n‚ö†Ô∏è Impossible d'ex√©cuter les clics!")
                print("‚Üí Aucune position n'a √©t√© captur√©e")
                print("‚Üí Utilisez d'abord l'option 1 pour capturer les positions souhait√©es")
                continue
            clicker.get_delay()
            clicker.execute_clicks()
            
        elif choix == '4':
            clicker.execute_last_params()
            
        elif choix == '5':
            print("\nüëã Merci d'avoir utilis√© Auto-Clicker!")
            break
            
        else:
            print("\n‚ùå Option invalide!")
            print("‚Üí Veuillez choisir une option entre 1 et 5")

if __name__ == "__main__":
    main()